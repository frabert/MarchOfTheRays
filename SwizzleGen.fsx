open System.IO
open System.CodeDom.Compiler

let rec genSwizzles (set: string list) (n: int) =
    if n = 1 then
        List.map (fun x -> (x, [x])) set
    else
        let subs = genSwizzles set (n - 1)
        List.collect (fun x -> List.map (fun (y, members) -> (x + y, x::members)) subs) set

let textWriter = new StreamWriter("MarchOfTheRays.Core/Swizzle.cs")
let indenter = new IndentedTextWriter(textWriter, "    ")
indenter.Indent <- 0

let writeIndented f =
    indenter.WriteLine("{")
    indenter.Indent <- indenter.Indent + 1
    f ()
    indenter.Indent <- indenter.Indent - 1
    indenter.WriteLine("}")
    indenter.WriteLine()

let writeSwizzle resType name argType components =
    indenter.WriteLine(sprintf "public static %s %s(%s arg)" resType name argType)
    writeIndented (fun _ ->
        let argList = ((List.map (fun x -> "arg." + x) components) |> String.concat ", ")
        indenter.WriteLine(sprintf "return new %s(%s);" resType argList)
    )

indenter.WriteLine("// This file was automatically generated by SwizzleGen.fsx, do not edit manually")
indenter.WriteLine("using System.Numerics;")
indenter.WriteLine("namespace MarchOfTheRays.Core")
writeIndented (fun _ -> 
    indenter.WriteLine("public static class Swizzle")
    writeIndented (fun _ ->
        let types = [
            ("Vector2", ["X"; "Y"])
            ("Vector3", ["X"; "Y"; "Z"])
            ("Vector4", ["X"; "Y"; "Z"; "W"])
        ]

        List.map (fun (t, comps) ->
            let swizzles2 = genSwizzles comps 2
            let swizzles3 = genSwizzles comps 3
            let swizzles4 = genSwizzles comps 4 
            List.map (fun (name, args) -> writeSwizzle "Vector2" name t args) swizzles2 |> ignore
            List.map (fun (name, args) -> writeSwizzle "Vector3" name t args) swizzles3 |> ignore
            List.map (fun (name, args) -> writeSwizzle "Vector4" name t args) swizzles4 |> ignore
        ) types |> ignore
    )
    indenter.WriteLine("public enum SwizzleType")
    writeIndented(fun _ ->
        let comps = ["X"; "Y"; "Z"; "W"]
        let swizzles2 = genSwizzles comps 2 |> List.map (fun (x, _) -> x)
        let swizzles3 = genSwizzles comps 3 |> List.map (fun (x, _) -> x)
        let swizzles4 = genSwizzles comps 4 |> List.map (fun (x, _) -> x)
        let swizzles = List.concat [swizzles2; swizzles3; swizzles4]

        List.map (fun name ->
            indenter.WriteLine(sprintf "%s," name)
        ) swizzles |> ignore
    )
)

indenter.Close()
textWriter.Close()